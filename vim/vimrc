
""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"

" behave less like vi (i.e. more vim features)
set nocompatible

" use a better default encoding
set encoding=utf-8

" set up our cache directories
function! s:cache_path(suffix)
    return $XDG_CACHE_HOME . '/vim/' . a:suffix
endfunction

function! s:ensure_dir(dir)
    if !isdirectory(a:dir) | call mkdir(a:dir, "p") | endif
endfunction

let &directory  = s:cache_path('swap')
let &backupdir  = s:cache_path('backup')
let &undodir    = s:cache_path('undo')
let &viminfo   .= ',n' . s:cache_path(has('nvim') ? 'nviminfo' : 'viminfo')

call s:ensure_dir(&directory)
call s:ensure_dir(&backupdir)
call s:ensure_dir(&undodir)

" persist undo history
set undofile

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug
"

if has('python3')
  silent! python3 1
endif

set runtimepath^=$XDG_CONFIG_HOME/vim
call plug#begin(s:cache_path('plugged'))

Plug 'jaredru/base16-vim'
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'mbbill/undotree'
Plug 'jaredru/vim-commenter',     { 'on': ['Comment', 'Uncomment'] }
Plug 'junegunn/vim-easy-align',   { 'on': ['<Plug>(EasyAlign)'] }
Plug 'easymotion/vim-easymotion', { 'on': ['<Plug>(easymotion-prefix)', '<Plug>(easymotion-f)', '<Plug>(easymotion-s2)', '<Plug>(easymotion-sn)'] }
Plug 'derekwyatt/vim-fswitch',    { 'on': ['FSHere'] }
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-surround'

Plug 'https://bitbucket.org/fouvrai/vim-filelist.git'

" file type
Plug 'kchmck/vim-coffee-script', { 'for': ['coffee'] }
Plug 'fatih/vim-go',             { 'for': ['go'] }
Plug 'pangloss/vim-javascript',  { 'for': ['javascript'] }
Plug 'mxw/vim-jsx',              { 'for': ['javascript'] }
Plug 'PProvost/vim-ps1',         { 'for': ['ps1'] }
Plug 'rodjek/vim-puppet',        { 'for': ['puppet'] }

" interesting things that i'm not actively using
" Plug 'airblade/vim-gitgutter'
" Plug 'junegunn/gv.vim'
" Plug 'tpope/vim-endwise'
" Plug 'tpope/vim-jdaddy'
" Plug 'tpope/vim-capslock'
" Plug 'AndrewRadev/splitjoin.vim'
" Plug 'junegunn/vim-after-object'
" Plug 'justinmk/vim-gtfo'
" Plug 'jiangmiao/auto-pairs'
" Plug 'chrisbra/NrrwRgn'
" Plug 'nathanaelkane/vim-indent-guides'

call plug#end()

if exists('bootstrap')
    source $XDG_CONFIG_HOME/vim/pluglock.vim
    qa!
endif

""""""""""""""""""""""""""""""""""""""""""""""""""
" GUI
"

if has("gui_running")
    " use my screen real estate
    if !exists("loaded_vimrc")
        set lines=60
        set columns=120
    endif

    " use a better font
    " set guifont=Meslo\ LG\ S\ for\ Powerline:h11
    " set guifont=Cascadia\ Code\ PL:h12
    set guifont=Consolas\ NF:h13

    if has("win32")
        " set guifont=Consolas:h9
    elseif has("mac")
        macmenu File.Close key=<nop>
    endif

    " minimize the gui
    set guioptions=r
else
    " eliminate the <ESC> delay in the terminal
    set ttimeoutlen=10
endif

""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors
"

" set the default color scheme
set background=dark
colorscheme base16-twilight

""""""""""""""""""""""""""""""""""""""""""""""""""
" Indentation
"

" copy indent from current line when starting a new line
" and use per-filetype indentation rules
set autoindent
filetype indent on

" filetype indent does weird things with #
inoremap # X#

" tabs are 4 spaces
set tabstop=4

" tabs feel like 4 spaces
set softtabstop=4

" autoindents are 4 spaces
set shiftwidth=4

" use spaces instead of tabs
set expandtab

""""""""""""""""""""""""""""""""""""""""""""""""""
" User Interface
"

" show line numbers
set number

" don't wrap lines
set nowrap

" folding is awful
set nofoldenable

" selection (visual mode, for instance) is *exclusive*
set selection=exclusive

" show tabs and trailing spaces
set listchars=tab:»·,trail:•
set list

" flash matched parentheses, brackets, and braces
set showmatch

" flash instead of beep for errors
set visualbell

" don't redraw when running macros
set lazyredraw

" always display our statusline
set laststatus=2

" show info about the command we're currently running
" also shows the size of our current selection in visual mode
set showcmd

" show matches for command completion
set wildmenu

" show the popup even for just one match
set completeopt=menu,menuone,preview

""""""""""""""""""""""""""""""""""""""""""""""""""
" Movement
"

" keep four lines when scrolling
set scrolloff=3

" move freely between lines
set whichwrap+=<,>,[,],h,l

" allow selecting one char after the end of the line
set virtualedit=block,onemore

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

""""""""""""""""""""""""""""""""""""""""""""""""""
" Searching
"

" make searches case insensitive
" unless they're mixed case
set ignorecase
set smartcase

" search while typing
set incsearch

" do not highlight the last used search term
set nohlsearch

" by default we want substitutions to occur in the entire line
set gdefault

""""""""""""""""""""""""""""""""""""""""""""""""""
" Files
"

" allow switching buffers without saving
set hidden

" automatically set our working dir to the current file
set autochdir

""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
"

" comma leader is much more handy
let mapleader=','

" automatically map various states properly
function! MultiMap(lhs, rhs)
    exec "noremap  <silent>" . a:lhs . "      " . a:rhs . "<CR>"
    exec "inoremap <silent>" . a:lhs . " <C-O>" . a:rhs . "<CR>"
    exec "vnoremap <silent>" . a:lhs . "      " . a:rhs . "<CR>gv"
endfunction

" edit this file
call MultiMap("<C-F1>", ":e " . expand("<sfile>:p"))

" enable/disable hlsearch
call MultiMap("<Leader>hl", ":set hlsearch!")

" ctrl+w should close the buffer
call MultiMap("<Leader>w", ":bd")

" switch buffers with ctrl-tab and ctrl-shift-tab
noremap <C-TAB>   :bn<CR>
noremap <C-S-TAB> :bp<CR>

" when text is selected, < and > indent
vnoremap > >gv
vnoremap < <gv

" $ doesn't go past the last char with virtualedit=onemore
nnoremap <silent> $ $l

" visual paste should delete to the black hole register first so we don't
" overwrite the unnamed register
vnoremap p "_dp
vnoremap P "_dP

" shift+j and shift+k should move by pages
nnoremap <S-J> <PageDown>
nnoremap <S-K> <PageUp>

xnoremap <S-J> <S-PageDown>
xnoremap <S-K> <S-PageUp>

" j and k should always work on virtual lines
noremap j gj
noremap k gk

" 0 and $ should work on virtual lines when wrapping
function! s:Move(m)
    exec "normal! " . (&wrap ? "g" : "") . a:m
endfunction
nnoremap <silent> 0 :call <SID>Move("0")<CR>
nnoremap <silent> $ :call <SID>Move("$")<CR>
vnoremap <silent> 0 <C-C>:call <SID>Move("0")<CR>v`<o
vnoremap <silent> $ <C-C>:call <SID>Move("$l")<CR>v`>o

" but keep line joining enabled via leader
noremap <Leader><S-J> <S-J>

" json formatting
nnoremap <Leader>json :.!python -m json.tool<CR>
vnoremap <Leader>json :!python -m json.tool<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Buffer Movement
"
" in any sort of ui with tabs, i always want to enter the tab to the right
" when the current tab is closed.  i want the same thing with my buffers.  go
" to the next *valid* buffer when the current buffer is deleted.
"

let s:nextBufnr = -1

function! s:OnBufEnter(buffer)
    " only do anything if we have a next buffer set
    if (s:nextBufnr != -1)
        exec "b " . s:nextBufnr
    endif

    let s:nextBufnr = -1
endfunction

function! s:OnBufDelete(buffer)
    let s:nextBufnr = -1

    " only set a next buffer if we don't have multiple windows.
    " if we do, we'll just go to another window, which is fine.
    if (winbufnr(2) == -1)
        let l:bufnrs = range(1, bufnr('$'))
        call filter(l:bufnrs, 'buflisted(v:val)')

        let l:bufnr = str2nr(a:buffer)
        let l:index = index(l:bufnrs, l:bufnr)

        " we only care if we consider our current buffer 'valid'
        if (l:index != -1)
            let l:nextIndex = l:index + 1

            " if we're closing the last buffer, go to the previous instead
            if (len(l:bufnrs) <= l:nextIndex)
                let l:nextIndex = l:nextIndex - 2
            endif

            let s:nextBufnr = l:bufnrs[l:nextIndex]
        endif
    endif
endfunction

autocmd BufEnter  * call s:OnBufEnter(expand("<abuf>"))
autocmd BufDelete * call s:OnBufDelete(expand("<abuf>"))

""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax Highlighting
"

function! s:ShowSyntaxGroups()
    let l:id    = synID(line('.'), col('.'), 0)
    let l:names = []

    while 1
        call add(l:names, synIDattr(l:id, 'name'))
        let l:next = synIDtrans(l:id)

        if l:next != l:id
            let l:id = l:next
        else
            break
        endif
    endwhile

    echo join(l:names, ' -> ')
endfunction

noremap <Leader>sg :call <SID>ShowSyntaxGroups()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Find & Replace
"

function! FindAndReplace()
    normal gv"hy

    if @h =~ "\n"
        return "'<,'>s/"
    else
        return "%s/" . escape(@h, '"\/') . "/"
    endif
endfunction

noremap  <C-H>      :%s/<C-R><C-W>/
inoremap <C-H> <C-O>:%s/<C-R><C-W>/
vnoremap <C-H> <C-C>:<C-R>=FindAndReplace()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"

" lightline
set noshowmode
set showtabline=2
let g:lightline =
  \ {
  \     'colorscheme': 'syntax',
  \     'active': {
  \         'left': [
  \             ['mode'],
  \             ['fugitive', 'filename', 'modified'],
  \         ],
  \     },
  \     'tabline': {
  \         'left':  [['buffers']],
  \         'right': [[]],
  \     },
  \     'component_expand': {
  \         'buffers': 'lightline#bufferline#buffers',
  \     },
  \     'component_function': {
  \         'fugitive': 'LightlineFugitive',
  \     },
  \     'component_type': {
  \         'buffers': 'tabsel',
  \     },
  \     'separator':    { 'left': "\ue0b0", 'right': "\ue0b2" },
  \     'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
  \ }
let g:lightline#bufferline#show_number = 1

function! LightlineFugitive()
    if exists("*fugitive#head")
        let _ = fugitive#head()
        return strlen(_) ? ' '._ : ''
    endif
    return ''
endfunction

" filelist
call MultiMap("<Leader>f", ":FileList")

if has("mac")
    let g:FileList_CacheGenerationCommand = 'fd -t f . {dir} | sed -E "s#(.*)/([^/]+$)#\2 (\1)#" | sort -f > {out}'
endif

" filetypes
autocmd BufEnter *.cson   set filetype=coffee
autocmd BufEnter *.panel  set filetype=json
autocmd BufEnter Fastfile set filetype=ruby

augroup SourceHeaderPairs
    autocmd BufEnter *.cpp,*.cxx,*.cc,*.c let b:fswitchdst  = "h,hpp"
    autocmd BufEnter *.hpp,*.hxx,*.h      let b:fswitchdst  = "cpp,cxx,cc,c"
    autocmd BufEnter *                    let b:fswitchlocs = "./"
augroup end

call MultiMap("<C-F10>", ":FSHere")

" commenter
noremap  <silent> <C-K>      :Comment<CR>
inoremap <silent> <C-K> <C-O>:Comment<CR>
vnoremap <silent> <C-K>      :Comment<CR>gv

noremap  <silent> <C-J>      :Uncomment<CR>
inoremap <silent> <C-J> <C-O>:Uncomment<CR>
vnoremap <silent> <C-J>      :Uncomment<CR>gv

" easymotion
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_smartcase        = 1
let g:EasyMotion_use_upper        = 1
let g:EasyMotion_keys             = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'

map  <Leader><Leader> <Plug>(easymotion-prefix)
map  f                <Plug>(easymotion-f)
nmap s                <Plug>(easymotion-s2)
map  /                <Plug>(easymotion-sn)

noremap <Leader>/ /

" tab alignment
nmap <Leader>a <Plug>(EasyAlign)ip
vmap <Leader>a <Plug>(EasyAlign)

" jsx
let g:jsx_ext_required = 0

" golang
let g:go_doc_keywordprg_enabled = 0

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocommands
"

" when editing a file, jump to the last cursor position
autocmd BufReadPost * call RestorePosition()
function! RestorePosition()
    if line("'\"") <= line("$")
        normal `"
    else
        normal G
    endif
endfunction

" for windows, if the file is a symbolic link, set backupcopy to yes
if has("win32")
    autocmd BufReadPost * call HandleSymLinksOnWindows()
    function! HandleSymLinksOnWindows()
        let l:dir = system("dir " . expand("<afile>"))

        if (match(l:dir, "SYMLINK") != -1)
            set backupcopy=yes
        endif
    endfunction
endif

" override vim's default ftplugins for indenting our text
autocmd FileType * set formatoptions-=o
autocmd FileType * set formatoptions-=r

let g:loaded_vimrc = 1
" vim:ft=vim:ff=unix

